---
- name: Install or remove Operator in OpenShift with optional manual approval and version pinning
  hosts: localhost
  gather_facts: no
  vars:
    approval_strategy: Automatic  # or Manual
    operator_state: present       # present or absent
    operator_name: ""             # Pass the operator name as an extra var
    operator_version: ""          # Optional, pass specific version (e.g., elasticsearch-operator.v5.8.3)

  tasks:

  - name: Validate inputs
    import_tasks: validate_inputs.yml

  - name: Collecting operator information
    k8s_info:
      api_version: packages.operators.coreos.com/v1
      kind: PackageManifest
      name: "{{ operator_name }}"
      namespace: openshift-marketplace
    register: _operator_information
    retries: 10
    delay: 30
    until: _operator_information.resources | length > 0
    ignore_errors: true

  - name: Fail if the operator does not exist
    fail:
      msg: "The operator {{ operator_name }} cannot be found or does not exist"
    when: _operator_information.resources | length == 0

  - name: Get defaultChannel
    set_fact:
      _channel: "{{ _operator_information.resources[0].status.defaultChannel }}"

  - name: Get the channel information
    set_fact:
      _channel_info: "{{ _operator_information | json_query(query) | first }}"
    vars:
      query: "resources[0].status.channels[?name==`{{ _channel }}`]"

  - name: Setup initial variables
    set_fact:
      _use_default_namespace: "{{ _channel_info | json_query('currentCSVDesc.installModes[?type==`AllNamespaces`].supported') | first }}"
      _annotations: "{{ _channel_info.currentCSVDesc.annotations }}"
      _version: "{{ operator_version if operator_version else _channel_info.currentCSV }}"
      _displayname: "{{ _channel_info.currentCSVDesc.displayName }}"
      _source: "{{ _operator_information.resources[0].status.catalogSource }}"

  - name: Set default namespace name
    set_fact:
      _namespace_name: openshift-operators
    when:
      - _use_default_namespace
      - '"operatorframework.io/suggested-namespace" not in _annotations'

  - name: Set suggested namespace name
    set_fact:
      _namespace_name: "{{ _annotations['operatorframework.io/suggested-namespace'] }}"
    when:
      - '"operatorframework.io/suggested-namespace" in _annotations'

  - name: Set personal namespace name
    set_fact:
      _namespace_name: "{{ operator_name }}"
    when:
      - not _use_default_namespace | bool
      - '"operatorframework.io/suggested-namespace" not in _annotations'

  - name: Ensure target namespace exists
    k8s:
      state: "{{ operator_state }}"
      definition:
        apiVersion: v1
        kind: Namespace
        metadata:
          name: "{{ _namespace_name }}"

  - name: Setup operator group
    k8s:
      state: "{{ operator_state }}"
      definition:
        apiVersion: operators.coreos.com/v1
        kind: OperatorGroup
        metadata:
          name: "{{ operator_name }}"
          namespace: "{{ _namespace_name }}"
        spec:
          targetNamespaces:
            - "{{ _namespace_name }}"
    when:
      - '"operatorframework.io/suggested-namespace" in _annotations or not _use_default_namespace | bool'
      - operator_state != 'absent'

  - name: Setup operator subscription
    k8s:
      state: "{{ operator_state }}"
      definition:
        apiVersion: operators.coreos.com/v1alpha1
        kind: Subscription
        metadata:
          name: "{{ operator_name }}"
          namespace: "{{ _namespace_name }}"
        spec:
          channel: "{{ _channel }}"
          name: "{{ operator_name }}"
          source: "{{ _source }}"
          sourceNamespace: openshift-marketplace
          installPlanApproval: "{{ approval_strategy }}"
          {{ 'startingCSV: ' ~ operator_version if operator_version else '' }}

  # Only run InstallPlan approval for Manual approval
  - name: Wait for InstallPlan to be created
    k8s_info:
      api_version: operators.coreos.com/v1alpha1
      kind: InstallPlan
      namespace: "{{ _namespace_name }}"
    register: installplan_info
    retries: 20
    delay: 15
    until: installplan_info.resources | length > 0
    when: operator_state != 'absent' and approval_strategy == 'Manual'

  - name: Approve the InstallPlan
    k8s:
      state: present
      definition:
        apiVersion: operators.coreos.com/v1alpha1
        kind: InstallPlan
        metadata:
          name: "{{ installplan_info.resources[0].metadata.name }}"
          namespace: "{{ _namespace_name }}"
        spec:
          approved: true
    when: operator_state != 'absent' and approval_strategy == 'Manual'

  - name: Delete the ClusterServiceVersion
    k8s:
      state: "{{ operator_state }}"
      definition:
        apiVersion: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        metadata:
          name: "{{ _version }}"
          namespace: "{{ _namespace_name }}"
    when: operator_state == 'absent'

  - name: Wait for operator installation to complete
    k8s_info:
      api_version: operators.coreos.com/v1alpha1
      kind: ClusterServiceVersion
      name: "{{ _version }}"
      namespace: "{{ _namespace_name }}"
    register: _csv_info_out
    vars:
      query: "resources[0].status.phase == 'Succeeded'"
    until: _csv_info_out | json_query(query)
    retries: 30
    delay: 30
    when: operator_state != 'absent'




shell: |
  oc get packagemanifest -o json | jq -r '.items[] | select(.metadata.name=="{{ operator_name }}" and (.status.catalogSource // "")=="{{ catalog_source }}") | "\(.metadata.name)\t\(.status.catalogSource // "N/A")"'

