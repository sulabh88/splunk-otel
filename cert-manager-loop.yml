# defaults/main.yml

operators:
  - name: cert-manager
    approval_strategy: Automatic
    operator_version: ""
    operator_state: present
  - name: cert-utils
    approval_strategy: Manual
    operator_version: cert-utils-operator.v1.3.0
    operator_state: present
  - name: etc
    approval_strategy: Automatic
    operator_version: ""
    operator_state: present


---

- name: Install multiple OpenShift Operators
  vars:
    operator_list: "{{ operators }}"
  loop: "{{ operator_list }}"
  loop_control:
    loop_var: operator
  vars:
    operator_name: "{{ operator.name }}"
    approval_strategy: "{{ operator.approval_strategy | default('Automatic') }}"
    operator_version: "{{ operator.operator_version | default('') }}"
    operator_state: "{{ operator.operator_state | default('present') }}"

  block:

    - name: Collecting operator information
      k8s_info:
        api_version: packages.operators.coreos.com/v1
        kind: PackageManifest
        name: "{{ operator_name }}"
        namespace: openshift-marketplace
      register: _operator_information
      retries: 10
      delay: 30
      until: _operator_information.resources | length > 0
      ignore_errors: true

    - name: Fail if the operator does not exist
      fail:
        msg: "The operator {{ operator_name }} cannot be found or does not exist"
      when: _operator_information.resources | length == 0

    - name: Get defaultChannel
      set_fact:
        _channel: "{{ _operator_information.resources[0].status.defaultChannel }}"

    - name: Get the channel information
      set_fact:
        _channel_info: "{{ _operator_information | json_query(query) | first }}"
      vars:
        query: "resources[0].status.channels[?name==`{{ _channel }}`]"

    - name: Setup initial variables
      set_fact:
        _use_default_namespace: "{{ _channel_info | json_query('currentCSVDesc.installModes[?type==`AllNamespaces`].supported') | first }}"
        _annotations: "{{ _channel_info.currentCSVDesc.annotations }}"
        _version: "{{ operator_version if operator_version else _channel_info.currentCSV }}"
        _source: "{{ _operator_information.resources[0].status.catalogSource }}"

    - name: Determine namespace
      set_fact:
        _namespace_name: >-
          {% if _use_default_namespace and 'operatorframework.io/suggested-namespace' not in _annotations %}
            openshift-operators
          {% elif 'operatorframework.io/suggested-namespace' in _annotations %}
            {{ _annotations['operatorframework.io/suggested-namespace'] }}
          {% else %}
            {{ operator_name }}
          {% endif %}

    - name: Ensure target namespace exists
      k8s:
        state: "{{ operator_state }}"
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ _namespace_name }}"

    - name: Setup operator group
      k8s:
        state: "{{ operator_state }}"
        definition:
          apiVersion: operators.coreos.com/v1
          kind: OperatorGroup
          metadata:
            name: "{{ operator_name }}"
            namespace: "{{ _namespace_name }}"
          spec:
            targetNamespaces:
              - "{{ _namespace_name }}"
      when:
        - '"operatorframework.io/suggested-namespace" in _annotations or not _use_default_namespace | bool'
        - operator_state != 'absent'

    - name: Setup operator subscription
      k8s:
        state: "{{ operator_state }}"
        definition:
          apiVersion: operators.coreos.com/v1alpha1
          kind: Subscription
          metadata:
            name: "{{ operator_name }}"
            namespace: "{{ _namespace_name }}"
          spec:
            channel: "{{ _channel }}"
            name: "{{ operator_name }}"
            source: "{{ _source }}"
            sourceNamespace: openshift-marketplace
            installPlanApproval: "{{ approval_strategy }}"
            {{ 'startingCSV: ' ~ operator_version if operator_version else '' }}

    - name: Wait for InstallPlan to be created
      k8s_info:
        api_version: operators.coreos.com/v1alpha1
        kind: InstallPlan
        namespace: "{{ _namespace_name }}"
      register: installplan_info
      retries: 20
      delay: 15
      until: installplan_info.resources | length > 0
      when: operator_state != 'absent' and approval_strategy == 'Manual'

    - name: Approve the InstallPlan
      k8s:
        state: present
        definition:
          apiVersion: operators.coreos.com/v1alpha1
          kind: InstallPlan
          metadata:
            name: "{{ installplan_info.resources[0].metadata.name }}"
            namespace: "{{ _namespace_name }}"
          spec:
            approved: true
      when: operator_state != 'absent' and approval_strategy == 'Manual'

    - name: Delete the ClusterServiceVersion
      k8s:
        state: "{{ operator_state }}"
        definition:
          apiVersion: operators.coreos.com/v1alpha1
          kind: ClusterServiceVersion
          metadata:
            name: "{{ _version }}"
            namespace: "{{ _namespace_name }}"
      when: operator_state == 'absent'

    - name: Wait for operator installation to complete
      k8s_info:
        api_version: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        name: "{{ _version }}"
        namespace: "{{ _namespace_name }}"
      register: _csv_info_out
      vars:
        query: "resources[0].status.phase == 'Succeeded'"
      until: _csv_info_out | json_query(query)
      retries: 30
      delay: 30
      when: operator_state != 'absent'


- name: Log successful operator installation
      ansible.builtin.debug:
        msg: "Operator {{ operator_name }} (version: {{ operator_version }}) successfully {{ 'installed' if operator_state == 'present' else 'removed' }} in namespace {{ namespace_name }}."




